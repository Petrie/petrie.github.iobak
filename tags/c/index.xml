<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Petrie&#39;s Home</title>
    <link>http://petrie.github.io/tags/c/</link>
    <description>Recent content in C on Petrie&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Apr 2018 18:22:53 +0000</lastBuildDate>
    
	<atom:link href="http://petrie.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP内存管理ZMM（五）－大内存区large_free_bucket的存入</title>
      <link>http://petrie.github.io/post/2018-04-12-php-zend-memory-manager4-large-free-bucket/</link>
      <pubDate>Thu, 12 Apr 2018 18:22:53 +0000</pubDate>
      
      <guid>http://petrie.github.io/post/2018-04-12-php-zend-memory-manager4-large-free-bucket/</guid>
      <description>&lt;p&gt;之前的章节中介绍过large_free_bucket的存入条件。这一篇将介绍large_free_bucket的主要结构包括其中的链表结构和树结构和存入取出流程。本章讲通过图示大内存区域内存分部情况。&lt;/p&gt;

&lt;h3 id=&#34;什么时候会向large-free-bucket存入内存块&#34;&gt;什么时候会向large_free_bucket存入内存块&lt;/h3&gt;

&lt;p&gt;这里在复习下存入large_free_bucket流程。在调用emalloc申请能存，且在当前heap中没有找到合适内存块，emalloc函数会调用malloc向内核申请内存。向内核申请每次只能申请 heap-&amp;gt;block_size倍数大小内存。所以内核申请到的  heap-&amp;gt;block_size倍数 大小的内存并不会全部返回到emalloc调用者，而是有剩余。&lt;/p&gt;

&lt;p&gt;举个例子，假设heap-&amp;gt;block_size=256k，如果emalloc调用者申请大小为250k时，emalloc内部会向内核申请256k大小的内存。所以会有6k的内存剩余，这6k的内存将会存入到&lt;strong&gt;大内存区large_free_bucket&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;另外一个例子，假设heap-&amp;gt;block_size=256k，如果emalloc调用者申请大小为260k（大于256k）时，emalloc会申请256*2=512k大小的内存，此时会有512k－260k＝252k的内存剩余。此时剩下的252k内存会存入到&lt;strong&gt;剩余内存区rest_bucket&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;手动构建large-free-bucket结构&#34;&gt;手动构建large_free_bucket结构&lt;/h3&gt;

&lt;h4 id=&#34;large-free-bucket结构举例&#34;&gt;large_free_bucket结构举例&lt;/h4&gt;

&lt;p&gt;现在假设有以下内存块在large_free_bucket，分别为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;大小			二进制					alloc_size
	
600			0000 0010 0101 1000		262144-48-600=261496
704			0000 0010 1100 0000		262144-48-704=261392
800			0000 0011 0010 0000		262144-48-800=261296
904			0000 0011 1000 1000		262144-48-904=261192
1000		0000 0011 1110 1000		262144-48-1000=261096
600			0000 0010 0101 1000		262144-48-600=261496
704			0000 0010 1100 0000		262144-48-704=261392
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面第一列中是准备存入heap中的内存大小，第二列为其二进制。第三列为_zend_mm_alloc_int传入的内存大小。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP内存管理ZMM（四）－GDB调试php源码并手动调用ZMM相关函数</title>
      <link>http://petrie.github.io/post/2018-04-11-php-zend-gdb-call/</link>
      <pubDate>Wed, 11 Apr 2018 18:22:53 +0000</pubDate>
      
      <guid>http://petrie.github.io/post/2018-04-11-php-zend-gdb-call/</guid>
      <description>&lt;p&gt;本章讲介绍gdb调试php，并手动调用ZMM中申请内存和查找大内存块的函数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_zend_mm_alloc_int&lt;/li&gt;
&lt;li&gt;zend_mm_search_large_block&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;为什么要手动调用函数&#34;&gt;为什么要手动调用函数&lt;/h4&gt;

&lt;p&gt;在阅读PHP ZMM源码的时候，有许多复杂的逻辑仅仅通过阅读源码很难理解，比如大内存large_free_buckets结构的构造。同构手动调用函数，可以方便的执行要申请的内存大小，从而测试构造large_free_buckets结构&lt;/p&gt;

&lt;h4 id=&#34;编译安装php&#34;&gt;编译安装PHP&lt;/h4&gt;

&lt;p&gt;从github上下载php源码&lt;/p&gt;

&lt;p&gt;编译到目录:~/php5.6-disabledebug，注意不要开启debug选项&lt;/p&gt;

&lt;h4 id=&#34;gdb调试php&#34;&gt;GDB调试PHP&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>PHP内存管理ZMM（三）－内存分配函数emalloc</title>
      <link>http://petrie.github.io/post/2018-04-09-php-zend-memory-manager-2/</link>
      <pubDate>Wed, 11 Apr 2018 10:22:53 +0000</pubDate>
      
      <guid>http://petrie.github.io/post/2018-04-09-php-zend-memory-manager-2/</guid>
      <description>&lt;h4 id=&#34;主流程&#34;&gt;主流程&lt;/h4&gt;

&lt;p&gt;emalloc是ZMM中heap层实现的函数，其内部调用_zend_mm_alloc_int函数。在_zend_mm_alloc_int中会依次在heap层的缓存区、小内存区、大内存区、剩余内存区寻找合适的内存。如果在这四个区域中都为查找到合适的内存，则调用malloc向内核申请，在向内核申请内存时，申请的大小必须是segment_size(256k)的整数倍，最小为256k。以下用流程图展示&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP内存管理ZMM（二）－常见宏的值</title>
      <link>http://petrie.github.io/post/2018-04-09-normal-zend-macro-value/</link>
      <pubDate>Mon, 09 Apr 2018 14:22:25 +0000</pubDate>
      
      <guid>http://petrie.github.io/post/2018-04-09-normal-zend-macro-value/</guid>
      <description>&lt;h4 id=&#34;相关宏的定义&#34;&gt;相关宏的定义&lt;/h4&gt;

&lt;p&gt;64位系统非debug模式编译后的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define ZEND_MM_ALIGNMENT 8
#define ZEND_MM_ALIGNMENT_LOG2 3
#define ZEND_MM_MIN_SIZE					((ZEND_MM_ALIGNED_MIN_HEADER_SIZE&amp;gt;(ZEND_MM_ALIGNED_HEADER_SIZE+END_MAGIC_SIZE))?(ZEND_MM_ALIGNED_MIN_HEADER_SIZE-(ZEND_MM_ALIGNED_HEADER_SIZE+END_MAGIC_SIZE)):0) 
#define ZEND_MM_MAX_SMALL_SIZE				((ZEND_MM_NUM_BUCKETS&amp;lt;&amp;lt;ZEND_MM_ALIGNMENT_LOG2)+ZEND_MM_ALIGNED_MIN_HEADER_SIZE) 
#define ZEND_MM_ALIGNED_HEADER_SIZE			ZEND_MM_ALIGNED_SIZE(sizeof(zend_mm_block)) 
#define ZEND_MM_ALIGNED_FREE_HEADER_SIZE	ZEND_MM_ALIGNED_SIZE(sizeof(zend_mm_small_free_block)) 
#define ZEND_MM_MIN_ALLOC_BLOCK_SIZE		ZEND_MM_ALIGNED_SIZE(ZEND_MM_ALIGNED_HEADER_SIZE + END_MAGIC_SIZE) 
#define ZEND_MM_ALIGNED_MIN_HEADER_SIZE		(ZEND_MM_MIN_ALLOC_BLOCK_SIZE&amp;gt;ZEND_MM_ALIGNED_FREE_HEADER_SIZE?ZEND_MM_MIN_ALLOC_BLOCK_SIZE:ZEND_MM_ALIGNED_FREE_HEADER_SIZE) 
#define ZEND_MM_ALIGNED_SEGMENT_SIZE		ZEND_MM_ALIGNED_SIZE(sizeof(zend_mm_segment))  
#define ZEND_MM_TRUE_SIZE(size)				((size&amp;lt;ZEND_MM_MIN_SIZE)?(ZEND_MM_ALIGNED_MIN_HEADER_SIZE):(ZEND_MM_ALIGNED_SIZE(size+ZEND_MM_ALIGNED_HEADER_SIZE+END_MAGIC_SIZE)))
#define ZEND_MM_SMALL_SIZE(true_size)		(true_size &amp;lt; ZEND_MM_MAX_SMALL_SIZE)
#define ZEND_MM_BUCKET_INDEX(true_size)		((true_size&amp;gt;&amp;gt;ZEND_MM_ALIGNMENT_LOG2)-(ZEND_MM_ALIGNED_MIN_HEADER_SIZE&amp;gt;&amp;gt;ZEND_MM_ALIGNMENT_LOG2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面依次解释各个宏的含义和作用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ZEND_MM_ALIGNMENT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内存对齐的时候用到，值为8，无特别的逻辑含义&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ZEND_MM_ALIGNMENT_LOG2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;辅助内存对齐的时候用到，值为3，无特别的逻辑含义&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP内存管理ZMM(一)－基本概念、数据结构和相关初始化函数</title>
      <link>http://petrie.github.io/post/2018-04-08-php-zend-memory-manager/</link>
      <pubDate>Sun, 08 Apr 2018 06:06:12 +0000</pubDate>
      
      <guid>http://petrie.github.io/post/2018-04-08-php-zend-memory-manager/</guid>
      <description>&lt;h4 id=&#34;基本概念&#34;&gt;基本概念&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://flykobe.com/wp-content/uploads/2015/03/php-zend-memory-manager.jpg&#34; alt=&#34;ZZM架构图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，中间部分的zend memory manage由接口层、heap层、存储层(storage)组成。内存管理的主要逻辑在heap层中，后续主要讲解相关的数据结构和函数流程。&lt;/p&gt;

&lt;h4 id=&#34;基本数据结构&#34;&gt;基本数据结构&lt;/h4&gt;

&lt;p&gt;基于PHP-5.6&lt;/p&gt;

&lt;h5 id=&#34;zend-mm-block-info&#34;&gt;zend_mm_block_info&lt;/h5&gt;

&lt;p&gt;_zend_mm_block_info是ZMM内存管理中最小的数据单元。各字段含义见代码注释&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct _zend_mm_block_info {
#if ZEND_MM_COOKIES
   size_t _cookie;
#endif
   size_t _size;
   size_t _prev;
} zend_mm_block_info;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>